{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","className","alt","src","getGifs","category","a","urlSearch","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAgBhD,OACE,0BAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,OAMd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAfrB,SAACP,GAAO,IACnBM,EAAUN,EAAEQ,OAAZF,MACRR,EAAcQ,QCNLG,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACnC,OACE,yBAAKC,UAAU,8DACb,yBAAKC,IAAI,aAAaC,IAAKH,IAC3B,2BAAID,K,uBCHGK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,UAFP,uCAEO,cACaC,UAAUH,GADvB,oBAHR,oCAGQ,SAGGI,MAAMF,GAHT,cAGfG,EAHe,gBAKEA,EAAUC,OALZ,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRjB,MAAOgB,EAAIhB,MACXC,IAAG,UAAEe,EAAIE,cAAN,aAAE,EAAYC,iBAAiBlB,QAXjB,kBAeda,GAfc,4CAAH,sDCEPM,EAAU,SAAC,GAAkB,IAAhBd,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EACdpB,mBAAS,CACjC2B,KAAM,GACNQ,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRnB,EAAQC,GAAUmB,MAAK,SAACC,GACtBH,EAAS,CACPV,KAAMa,EACNL,SAAS,SAGZ,CAACf,IAEGgB,EDZmBK,CAAarB,GAA/BO,EAD+B,EAC/BA,KAAMQ,EADyB,EACzBA,QAEd,OACE,oCACE,4BAAKf,GACJe,GAAW,yCACZ,yBAAKnB,UAAU,aACZW,EAAKE,KAAI,SAACC,GACT,OAAO,kBAAC,EAAD,eAAaY,IAAKZ,EAAIC,IAAQD,UEVlCa,EAAe,WAAO,IAAD,EACI3C,mBAAS,CAAC,cADd,mBACzB4C,EADyB,KACb7C,EADa,KAGhC,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BACG6C,EAAWf,KAAI,SAACT,GAAD,OACd,kBAAC,EAAD,CAASsB,IAAKtB,EAAUA,SAAUA,UCT5CyB,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.69373197.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleChange = (e) => {\n    const { value } = e.target;\n    setInputValue(value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories((cats) => [inputValue, ...cats]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n","import React from \"react\";\n\nexport const GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeInUp animate__delay-1s\">\n      <img alt=\"Gif images\" src={url} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","const apiKey = \"EkolPnH1wXoGFnapSNy3sDsymGErLCYR\";\nconst urlBase = \"https://api.giphy.com/v1/gifs/search\";\n\nexport const getGifs = async (category) => {\n  const urlSearch = `${urlBase}?q=${encodeURI(category)}&api_key=${apiKey}`;\n\n  const respuesta = await fetch(urlSearch);\n\n  const { data } = await respuesta.json();\n\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n","import React from \"react\";\nimport { GifGridItem } from \"./GifGridItem\";\nimport { getGifs } from \"../helpers/getGifs\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\n\nexport const GifGrid = ({ category }) => {\n  const { data, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3>{category}</h3>\n      {loading && <p>Loading...</p>}\n      <div className=\"card-grid\">\n        {data.map((img) => {\n          return <GifGridItem key={img.id} {...img} />;\n        })}\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setState({\n        data: imgs,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"One Punch\"]);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { GifExpertApp } from \"./GifExpertApp\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}